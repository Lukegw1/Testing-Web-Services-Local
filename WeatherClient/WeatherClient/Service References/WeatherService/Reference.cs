//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WeatherClient.WeatherService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IWeatherSvc")]
    public interface IWeatherSvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/GetCurrentTemp", ReplyAction="http://tempuri.org/IWeatherSvc/GetCurrentTempResponse")]
        float GetCurrentTemp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/GetCurrentTemp", ReplyAction="http://tempuri.org/IWeatherSvc/GetCurrentTempResponse")]
        System.Threading.Tasks.Task<float> GetCurrentTempAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/GetWindSpeed", ReplyAction="http://tempuri.org/IWeatherSvc/GetWindSpeedResponse")]
        float GetWindSpeed();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/GetWindSpeed", ReplyAction="http://tempuri.org/IWeatherSvc/GetWindSpeedResponse")]
        System.Threading.Tasks.Task<float> GetWindSpeedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/SendWindSpeed", ReplyAction="http://tempuri.org/IWeatherSvc/SendWindSpeedResponse")]
        void SendWindSpeed(float windSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/SendWindSpeed", ReplyAction="http://tempuri.org/IWeatherSvc/SendWindSpeedResponse")]
        System.Threading.Tasks.Task SendWindSpeedAsync(float windSpeed);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/GetNumberOfArtists", ReplyAction="http://tempuri.org/IWeatherSvc/GetNumberOfArtistsResponse")]
        int GetNumberOfArtists();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWeatherSvc/GetNumberOfArtists", ReplyAction="http://tempuri.org/IWeatherSvc/GetNumberOfArtistsResponse")]
        System.Threading.Tasks.Task<int> GetNumberOfArtistsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWeatherSvcChannel : WeatherClient.WeatherService.IWeatherSvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherSvcClient : System.ServiceModel.ClientBase<WeatherClient.WeatherService.IWeatherSvc>, WeatherClient.WeatherService.IWeatherSvc {
        
        public WeatherSvcClient() {
        }
        
        public WeatherSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float GetCurrentTemp() {
            return base.Channel.GetCurrentTemp();
        }
        
        public System.Threading.Tasks.Task<float> GetCurrentTempAsync() {
            return base.Channel.GetCurrentTempAsync();
        }
        
        public float GetWindSpeed() {
            return base.Channel.GetWindSpeed();
        }
        
        public System.Threading.Tasks.Task<float> GetWindSpeedAsync() {
            return base.Channel.GetWindSpeedAsync();
        }
        
        public void SendWindSpeed(float windSpeed) {
            base.Channel.SendWindSpeed(windSpeed);
        }
        
        public System.Threading.Tasks.Task SendWindSpeedAsync(float windSpeed) {
            return base.Channel.SendWindSpeedAsync(windSpeed);
        }
        
        public int GetNumberOfArtists() {
            return base.Channel.GetNumberOfArtists();
        }
        
        public System.Threading.Tasks.Task<int> GetNumberOfArtistsAsync() {
            return base.Channel.GetNumberOfArtistsAsync();
        }
    }
}
